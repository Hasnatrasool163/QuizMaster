package CodingQuestionsFrames;

import java.awt.Dimension;
import java.awt.GridLayout;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JScrollPane;

/**
 *
 * @author MuhammadHasnatRasool
 */
public class C_Plus_Plus_Coding_Questions_Frame extends Coding_Questions_Frame {

    @Override
    public void loadQuestions(JPanel panel) {
        List<Question> questions = new ArrayList<>();
        questions.add(new Question("Write a Program to print: Hello World", "#include<iostream> using namespace std; int main() { cout << \"Hello, World!\" << endl; return 0; }"));
        questions.add(new Question("Write a Program to print numbers from 1 to 10", "#include<iostream> using namespace std; int main() { for (int i = 1; i <= 10; i++) { cout << i << endl; } return 0; }"));
        questions.add(new Question("Write a Program to find the area of a rectangle", "#include<iostream> using namespace std; int main() { int length = 5; int width = 3; int area = length * width; cout << \"Area: \" << area << endl; return 0; }"));
        questions.add(new Question("Write a Program to find the sum of all elements in an array", "#include<iostream> using namespace std; int main() { int arr[] = {1, 2, 3, 4, 5}; int sum = 0; for (int i = 0; i < 5; i++) { sum += arr[i]; } cout << \"Sum: \" << sum << endl; return 0; }"));
        questions.add(new Question("Write a Program to find the maximum element in an array", "#include<iostream> using namespace std; int main() { int arr[] = {1, 2, 3, 4, 5}; int max = arr[0]; for (int i = 1; i < 5; i++) { if (arr[i] > max) { max = arr[i]; } } cout << \"Max: \" << max << endl; return 0; }"));
        questions.add(new Question("Write a Program to find the minimum element in an array", "#include<iostream> using namespace std; int main() { int arr[] = {1, 2, 3, 4, 5}; int min = arr[0]; for (int i = 1; i < 5; i++) { if (arr[i] < min) { min = arr[i]; } } cout << \"Min: \" << min << endl; return 0; }"));
        questions.add(new Question("Write a Program to find the average of all elements in an array", "#include<iostream> using namespace std; int main() { int arr[] = {1, 2, 3, 4, 5}; int sum = 0; for (int i = 0; i < 5; i++) { sum += arr[i]; } double average = (double)sum / 5; cout << \"Average: \" << average << endl; return 0; }"));
        questions.add(new Question("Write a Program to find the standard deviation of an array", "#include<iostream> using namespace std; int main() { int arr[] = {1, 2, 3, 4, 5}; int sum = 0; for (int i = 0; i < 5; i++) { sum += arr[i]; } double mean = (double)sum / 5; double sumSquare = 0; for (int i = 0; i < 5; i++) { sumSquare += (arr[i] - mean) * (arr[i] - mean); } double standardDeviation = sqrt(sumSquare / 5); cout << \"Standard Deviation: \" << standardDeviation << endl; return 0; }"));
        questions.add(new Question("Write a Program to print numbers from 1 to 10 using while loop", "#include<iostream> using namespace std; int main() { int i = 1; while (i <= 10) { cout << i << endl; i++; } return 0; }"));
        questions.add(new Question("Write a Program to print numbers from 1 to 10 using do-while loop", "#include<iostream> using namespace std; int main() { int i = 1; do { cout << i << endl; i++; } while (i <= 10); return 0; }"));
        questions.add(new Question("Write a Program to find factorial of a number",
                "#include<iostream>\nusing namespace std;\n\nint factorial(int n) {\n    if (n == 0)\n        return 1;\n    else\n        return n * factorial(n - 1);\n}\n\nint main() {\n    int number = 5;\n    int result = factorial(number);\n    cout << \"Factorial of \" << number << \" is: \" << result << endl;\n    return 0;\n}"));

        questions.add(new Question("Write a Program to check if a number is prime or not",
                "#include<iostream>\nusing namespace std;\n\nbool isPrime(int n) {\n    if (n <= 1)\n        return false;\n    for (int i = 2; i*i <= n; i++) {\n        if (n % i == 0)\n            return false;\n    }\n    return true;\n}\n\nint main() {\n    int number = 17;\n    if (isPrime(number))\n        cout << number << \" is a prime number\" << endl;\n    else\n        cout << number << \" is not a prime number\" << endl;\n    return 0;\n}"));

        questions.add(new Question("Write a Program to reverse a string",
                "#include<iostream>\n#include<string>\nusing namespace std;\n\nint main() {\n    string str = \"Hello, World!\";\n    int n = str.length();\n    for (int i = n - 1; i >= 0; i--) {\n        cout << str[i];\n    }\n    cout << endl;\n    return 0;\n}"));

        questions.add(new Question("Write a Program to sort an array of integers using Bubble Sort",
                "#include<iostream>\nusing namespace std;\n\nvoid bubbleSort(int arr[], int n) {\n    for (int i = 0; i < n - 1; i++) {\n        for (int j = 0; j < n - i - 1; j++) {\n            if (arr[j] > arr[j + 1]) {\n                int temp = arr[j];\n                arr[j] = arr[j + 1];\n                arr[j + 1] = temp;\n            }\n        }\n    }\n}\n\nint main() {\n    int arr[] = {64, 25, 12, 22, 11};\n    int n = sizeof(arr) / sizeof(arr[0]);\n    bubbleSort(arr, n);\n    cout << \"Sorted array: \" << endl;\n    for (int i = 0; i < n; i++)\n        cout << arr[i] << \" \";\n    cout << endl;\n    return 0;\n}"));

        questions.add(new Question("Write a Program to implement Binary Search on a sorted array",
                "#include<iostream>\nusing namespace std;\n\nint binarySearch(int arr[], int left, int right, int x) {\n    while (left <= right) {\n        int mid = left + (right - left) / 2;\n        if (arr[mid] == x)\n            return mid;\n        if (arr[mid] < x)\n            left = mid + 1;\n        else\n            right = mid - 1;\n    }\n    return -1;\n}\n\nint main() {\n    int arr[] = {2, 3, 4, 10, 40};\n    int n = sizeof(arr) / sizeof(arr[0]);\n    int x = 10;\n    int result = binarySearch(arr, 0, n - 1, x);\n    if (result == -1)\n        cout << \"Element not found\" << endl;\n    else\n        cout << \"Element found at index \" << result << endl;\n    return 0;\n}"));

        questions.add(new Question("Write a Program to implement Insertion Sort on an array",
                "#include<iostream>\nusing namespace std;\n\nvoid insertionSort(int arr[], int n) {\n    int i, key, j;\n    for (i = 1; i < n; i++) {\n        key = arr[i];\n        j = i - 1;\n        while (j >= 0 && arr[j] > key) {\n            arr[j + 1] = arr[j];\n            j = j - 1;\n        }\n        arr[j + 1] = key;\n    }\n}\n\nint main() {\n    int arr[] = {12, 11, 13, 5, 6};\n    int n = sizeof(arr) / sizeof(arr[0]);\n    insertionSort(arr, n);\n    cout << \"Sorted array: \" << endl;\n    for (int i = 0; i < n; i++)\n        cout << arr[i] << \" \";\n    cout << endl;\n    return 0;\n}"));

        questions.add(new Question("Write a Program to implement Selection Sort on an array",
                "#include<iostream>\nusing namespace std;\n\nvoid selectionSort(int arr[], int n) {\n    int i, j, min_idx;\n    for (i = 0; i < n-1; i++) {\n        min_idx = i;\n        for (j = i+1; j < n; j++)\n            if (arr[j] < arr[min_idx])\n                min_idx = j;\n        int temp = arr[min_idx];\n        arr[min_idx] = arr[i];\n        arr[i] = temp;\n    }\n}\n\nint main() {\n    int arr[] = {64, 25, 12, 22, 11};\n    int n = sizeof(arr) / sizeof(arr[0]);\n    selectionSort(arr, n);\n    cout << \"Sorted array: \" << endl;\n    for (int i = 0; i < n; i++)\n        cout << arr[i] << \" \";\n    cout << endl;\n    return 0;\n}"));

        questions.add(new Question("Write a Program to implement Merge Sort on an array",
                "#include<iostream>\nusing namespace std;\n\nvoid merge(int arr[], int l, int m, int r) {\n    int n1 = m - l + 1;\n    int n2 = r - m;\n    int L[n1], R[n2];\n    for (int i = 0; i < n1; i++)\n        L[i] = arr[l + i];\n    for (int j = 0; j < n2; j++)\n        R[j] = arr[m + 1 + j];\n    int i = 0, j = 0, k = l;\n    while (i < n1 && j < n2) {\n        if (L[i] <= R[j]) {\n            arr[k] = L[i];\n            i++;\n        } else {\n            arr[k] = R[j];\n            j++;\n        }\n        k++;\n    }\n    while (i < n1) {\n        arr[k] = L[i];\n        i++;\n        k++;\n    }\n    while (j < n2) {\n        arr[k] = R[j];\n        j++;\n        k++;\n    }\n}\n\nvoid mergeSort(int arr[], int l, int r) {\n    if (l < r) {\n        int m = l + (r - l) / 2;\n        mergeSort(arr, l, m);\n        mergeSort(arr, m + 1, r);\n        merge(arr, l, m, r);\n    }\n}\n\nint main() {\n    int arr[] = {12, 11, 13, 5, 6, 7};\n    int n = sizeof(arr) / sizeof(arr[0]);\n    mergeSort(arr, 0, n - 1);\n    cout << \"Sorted array: \" << endl;\n    for (int i = 0; i < n; i++)\n        cout << arr[i] << \" \";\n    cout << endl;\n    return 0;\n}"));

        questions.add(new Question("Write a Program to find GCD (Greatest Common Divisor) of two numbers",
                "#include<iostream>\nusing namespace std;\n\nint gcd(int a, int b) {\n    if (b == 0)\n        return a;\n    return gcd(b, a % b);\n}\n\nint main() {\n    int num1 = 24, num2 = 18;\n    int result = gcd(num1, num2);\n    cout << \"GCD of \" << num1 << \" and \" << num2 << \" is: \" << result << endl;\n    return 0;\n}"));

        questions.add(new Question("Write a program to calculate factorial of a number", "#include<iostream> using namespace std; int main() { int n = 5; int factorial = 1; for (int i = 1; i <= n; ++i) { factorial *= i; } cout << \"Factorial of \" << n << \" is: \" << factorial << endl; return 0; }"));

        questions.add(new Question("Write a program to check if a number is prime", "#include<iostream> using namespace std; int main() { int num = 29; bool isPrime = true; for (int i = 2; i <= num / 2; ++i) { if (num % i == 0) { isPrime = false; break; } } if (isPrime) cout << num << \" is a prime number\" << endl; else cout << num << \" is not a prime number\" << endl; return 0; }"));

        questions.add(new Question("Write a program to reverse a string", "#include<iostream> #include<string> using namespace std; int main() { string str = \"hello\"; string reversed = \"\"; for (int i = str.length() - 1; i >= 0; --i) { reversed += str[i]; } cout << \"Reversed string: \" << reversed << endl; return 0; }"));

        questions.add(new Question("Write a program to check if a string is palindrome", "#include<iostream> #include<string> using namespace std; int main() { string str = \"madam\"; bool isPalindrome = true; int length = str.length(); for (int i = 0; i < length / 2; ++i) { if (str[i] != str[length - i - 1]) { isPalindrome = false; break; } } if (isPalindrome) cout << str << \" is a palindrome\" << endl; else cout << str << \" is not a palindrome\" << endl; return 0; }"));

        questions.add(new Question("Write a program to count the frequency of each element in an array", "#include<iostream> using namespace std; int main() { int arr[] = {1, 2, 3, 4, 2, 3, 1, 5}; int size = sizeof(arr) / sizeof(arr[0]); int freq[size]; for (int i = 0; i < size; ++i) { freq[i] = -1; } for (int i = 0; i < size; ++i) { int count = 1; for (int j = i + 1; j < size; ++j) { if (arr[i] == arr[j]) { ++count; freq[j] = 0; } } if (freq[i] != 0) { freq[i] = count; } } cout << \"Element\tFrequency\" << endl; for (int i = 0; i < size; ++i) { if (freq[i] != 0) { cout << arr[i] << \"\t\" << freq[i] << endl; } } return 0; }"));

        questions.add(new Question("Write a program to find the Fibonacci series up to n terms", "#include<iostream> using namespace std; int main() { int n = 10, t1 = 0, t2 = 1, nextTerm = 0; cout << \"Fibonacci Series: \"; for (int i = 1; i <= n; ++i) { if (i == 1) { cout << t1 << \", \"; continue; } if (i == 2) { cout << t2 << \", \"; continue; } nextTerm = t1 + t2; t1 = t2; t2 = nextTerm; cout << nextTerm << \", \"; } return 0; }"));

        questions.add(new Question("Write a program to sort elements in an array in ascending order using Bubble Sort", "#include<iostream> using namespace std; int main() { int arr[] = {64, 25, 12, 22, 11}; int n = sizeof(arr) / sizeof(arr[0]); for (int i = 0; i < n - 1; ++i) { for (int j = 0; j < n - i - 1; ++j) { if (arr[j] > arr[j + 1]) { int temp = arr[j]; arr[j] = arr[j + 1]; arr[j + 1] = temp; } } } cout << \"Sorted array: \"; for (int i = 0; i < n; ++i) { cout << arr[i] << \" \"; } return 0; }"));

        questions.add(new Question("Write a program to implement binary search in a sorted array", "#include<iostream> using namespace std; int binarySearch(int arr[], int l, int r, int x) { while (l <= r) { int mid = l + (r - l) / 2; if (arr[mid] == x) return mid; if (arr[mid] < x) l = mid + 1; else r = mid - 1; } return -1; } int main() { int arr[] = {2, 3, 4, 10, 40}; int n = sizeof(arr) / sizeof(arr[0]); int x = 10; int result = binarySearch(arr, 0, n - 1, x); (result == -1) ? cout << \"Element is not present in array\" : cout << \"Element is present at index \" << result; return 0; }"));

        questions.add(new Question("Write a program to implement selection sort in an array", "#include<iostream> using namespace std; void swap(int *xp, int *yp) { int temp = *xp; *xp = *yp; *yp = temp; } void selectionSort(int arr[], int n) { int min_idx; for (int i = 0; i < n - 1; ++i) { min_idx = i; for (int j = i + 1; j < n; ++j) { if (arr[j] < arr[min_idx]) { min_idx = j; } } swap(&arr[min_idx], &arr[i]); } } int main() { int arr[] = {64, 25, 12, 22, 11}; int n = sizeof(arr) / sizeof(arr[0]); selectionSort(arr, n); cout << \"Sorted array: \"; for (int i = 0; i < n; ++i) { cout << arr[i] << \" \"; } return 0; }"));

        questions.add(new Question("Write a program to implement insertion sort in an array", "#include<iostream> using namespace std; void insertionSort(int arr[], int n) { int i, key, j; for (i = 1; i < n; ++i) { key = arr[i]; j = i - 1; while (j >= 0 && arr[j] > key) { arr[j + 1] = arr[j]; j = j - 1; } arr[j + 1] = key; } } int main() { int arr[] = {12, 11, 13, 5, 6}; int n = sizeof(arr) / sizeof(arr[0]); insertionSort(arr, n); cout << \"Sorted array: \"; for (int i = 0; i < n; ++i) { cout << arr[i] << \" \"; } return 0; }"));

        questions.add(new Question("Write a program to implement quicksort in an array", "#include<iostream> using namespace std; void swap(int* a, int* b) { int t = *a; *a = *b; *b = t; } int partition(int arr[], int low, int high) { int pivot = arr[high]; int i = (low - 1); for (int j = low; j <= high - 1; ++j) { if (arr[j] < pivot) { ++i; swap(&arr[i], &arr[j]); } } swap(&arr[i + 1], &arr[high]); return (i + 1); } void quickSort(int arr[], int low, int high) { if (low < high) { int pi = partition(arr, low, high); quickSort(arr, low, pi - 1); quickSort(arr, pi + 1, high); } } int main() { int arr[] = {10, 7, 8, 9, 1, 5}; int n = sizeof(arr) / sizeof(arr[0]); quickSort(arr, 0, n - 1); cout << \"Sorted array: \"; for (int i = 0; i < n; ++i) { cout << arr[i] << \" \"; } return 0; }"));

        questions.add(new Question("Write a program to implement merge sort in an array", "#include<iostream> using namespace std; void merge(int arr[], int l, int m, int r) { int n1 = m - l + 1; int n2 = r - m; int L[n1], R[n2]; for (int i = 0; i < n1; ++i) L[i] = arr[l + i]; for (int j = 0; j < n2; ++j) R[j] = arr[m + 1 + j]; int i = 0, j = 0, k = l; while (i < n1 && j < n2) { if (L[i] <= R[j]) { arr[k] = L[i]; ++i; } else { arr[k] = R[j]; ++j; } ++k; } while (i < n1) { arr[k] = L[i]; ++i; ++k; } while (j < n2) { arr[k] = R[j]; ++j; ++k; } } void mergeSort(int arr[], int l, int r) { if (l >= r) return; int m = l + (r - l) / 2; mergeSort(arr, l, m); mergeSort(arr, m + 1, r); merge(arr, l, m, r); } int main() { int arr[] = {12, 11, 13, 5, 6, 7}; int n = sizeof(arr) / sizeof(arr[0]); mergeSort(arr, 0, n - 1); cout << \"Sorted array: \"; for (int i = 0; i < n; ++i) { cout << arr[i] << \" \"; } return 0; }"));

        questions.add(new Question("Write a program to implement heap sort in an array", "#include<iostream> using namespace std; void heapify(int arr[], int n, int i) { int largest = i; int l = 2 * i + 1; int r = 2 * i + 2; if (l < n && arr[l] > arr[largest]) largest = l; if (r < n && arr[r] > arr[largest]) largest = r; if (largest != i) { swap(arr[i], arr[largest]); heapify(arr, n, largest); } } void heapSort(int arr[], int n) { for (int i = n / 2 - 1; i >= 0; --i) heapify(arr, n, i); for (int i = n - 1; i > 0; --i) { swap(arr[0], arr[i]); heapify(arr, i, 0); } } int main() { int arr[] = {12, 11, 13, 5, 6, 7}; int n = sizeof(arr) / sizeof(arr[0]); heapSort(arr, n); cout << \"Sorted array: \"; for (int i = 0; i < n; ++i) cout << arr[i] << \" \"; return 0; }"));

        questions.add(new Question("Write a program to implement breadth-first search (BFS) in a graph", "#include<iostream> #include <list> using namespace std; class Graph { int V; list<int> *adj; public: Graph(int V); void addEdge(int v, int w); void BFS(int s); }; Graph::Graph(int V) { this->V = V; adj = new list<int>[V]; } void Graph::addEdge(int v, int w) { adj[v].push_back(w); } void Graph::BFS(int s) { bool *visited = new bool[V]; for(int i = 0; i < V; ++i) visited[i] = false; list<int> queue; visited[s] = true; queue.push_back(s); while(!queue.empty()) { s = queue.front(); cout << s << \" \"; queue.pop_front(); for(auto i = adj[s].begin(); i != adj[s].end(); ++i) { if(!visited[*i]) { visited[*i] = true; queue.push_back(*i); } } } } int main() { Graph g(4); g.addEdge(0, 1); g.addEdge(0, 2); g.addEdge(1, 2); g.addEdge(2, 0); g.addEdge(2, 3); g.addEdge(3, 3); cout << \"Breadth First Traversal starting from vertex 2: \"; g.BFS(2); return 0; }"));

        questions.add(new Question("Write a program to implement depth-first search (DFS) in a graph", "#include<iostream> #include<list> using namespace std; class Graph { int V; list<int> *adj; void DFSUtil(int v, bool visited[]); public: Graph(int V); void addEdge(int v, int w); void DFS(int v); }; Graph::Graph(int V) { this->V = V; adj = new list<int>[V]; } void Graph::addEdge(int v, int w) { adj[v].push_back(w); } void Graph::DFSUtil(int v, bool visited[]) { visited[v] = true; cout << v << \" \"; for (auto i = adj[v].begin(); i != adj[v].end(); ++i) if (!visited[*i]) DFSUtil(*i, visited); } void Graph::DFS(int v) { bool *visited = new bool[V]; for (int i = 0; i < V; ++i) visited[i] = false; DFSUtil(v, visited); } int main() { Graph g(4); g.addEdge(0, 1); g.addEdge(0, 2); g.addEdge(1, 2); g.addEdge(2, 0); g.addEdge(2, 3); g.addEdge(3, 3); cout << \"Depth First Traversal starting from vertex 2: \"; g.DFS(2); return 0; }"));

        questions.add(new Question("Write a program to calculate the power of a number using recursion", "#include<iostream> using namespace std; int power(int base, int exp) { if (exp != 0) return (base * power(base, exp - 1)); else return 1; } int main() { int base = 3, exp = 4; cout << \"Power of \" << base << \" raised to \" << exp << \" is: \" << power(base, exp); return 0; }"));

        questions.add(new Question("Write a program to implement binary search tree (BST) and perform insert, delete, and search operations", "#include<iostream> using namespace std; struct Node { int key; struct Node *left, *right; }; struct Node* newNode(int item) { struct Node* temp = new Node; temp->key = item; temp->left = temp->right = NULL; return temp; } struct Node* insert(struct Node* node, int key) { if (node == NULL) return newNode(key); if (key < node->key) node->left = insert(node->left, key); else if (key > node->key) node->right = insert(node->right, key); return node; } struct Node* minValueNode(struct Node* node) { struct Node* current = node; while (current && current->left != NULL) current = current->left; return current; } struct Node* deleteNode(struct Node* root, int key) { if (root == NULL) return root; if (key < root->key) root->left = deleteNode(root->left, key); else if (key > root->key) root->right = deleteNode(root->right, key); else { if (root->left == NULL) { struct Node* temp = root->right; delete root; return temp; } else if (root->right == NULL) { struct Node* temp = root->left; delete root; return temp; } struct Node* temp = minValueNode(root->right); root->key = temp->key; root->right = deleteNode(root->right, temp->key); } return root; } void inorder(struct Node* root) { if (root != NULL) { inorder(root->left); cout << root->key << \" \"; inorder(root->right); } } int main() { struct Node* root = NULL; root = insert(root, 50); insert(root, 30); insert(root, 20); insert(root, 40); insert(root, 70); insert(root, 60); insert(root, 80); cout << \"Inorder traversal of the BST: \"; inorder(root); cout << endl; root = deleteNode(root, 20); cout << \"Inorder traversal after deleting 20: \"; inorder(root); cout << endl; return 0; }"));

        questions.add(new Question("Write a program to reverse a linked list", "#include<iostream> using namespace std; struct Node { int data; struct Node* next; }; struct Node* reverse(struct Node* head) { struct Node* prev = NULL; struct Node* curr = head; struct Node* next = NULL; while (curr != NULL) { next = curr->next; curr->next = prev; prev = curr; curr = next; } head = prev; return head; } void printList(struct Node* head) { while (head != NULL) { cout << head->data << \" \"; head = head->next; } cout << endl; } struct Node* newNode(int key) { struct Node* temp = new Node; temp->data = key; temp->next = NULL; return temp; } int main() { struct Node* head = newNode(1); head->next = newNode(2); head->next->next = newNode(3); head->next->next->next = newNode(4); cout << \"Original linked list: \"; printList(head); head = reverse(head); cout << \"Reversed linked list: \"; printList(head); return 0; }"));

        questions.add(new Question("Write a program to find the height of a binary tree", "#include<iostream> using namespace std; struct Node { int data; struct Node* left, *right; }; struct Node* newNode(int data) { struct Node* node = new Node; node->data = data; node->left = node->right = NULL; return node; } int height(struct Node* node) { if (node == NULL) return 0; else { int lHeight = height(node->left); int rHeight = height(node->right); if (lHeight > rHeight) return(lHeight + 1); else return(rHeight + 1); } } int main() { struct Node* root = newNode(1); root->left = newNode(2); root->right = newNode(3); root->left->left = newNode(4); root->left->right = newNode(5); cout << \"Height of the binary tree is: \" << height(root); return 0; }"));

        questions.add(new Question("Write a program to find the diameter of a binary tree", "#include<iostream> using namespace std; struct Node { int data; struct Node* left, *right; }; struct Node* newNode(int data) { struct Node* node = new Node; node->data = data; node->left = node->right = NULL; return node; } int height(struct Node* node, int& ans) { if (node == NULL) return 0; int left_height = height(node->left, ans); int right_height = height(node->right, ans); ans = max(ans, 1 + left_height + right_height); return 1 + max(left_height, right_height); } int diameter(struct Node* tree) { if (tree == NULL) return 0; int ans = INT_MIN; int height_of_tree = height(tree, ans); return ans; } int main() { struct Node* root = newNode(1); root->left = newNode(2); root->right = newNode(3); root->left->left = newNode(4); root->left->right = newNode(5); cout << \"Diameter of the binary tree is: \" << diameter(root); return 0; }"));

        questions.add(new Question("Write a program to implement a stack using arrays", "#include<iostream> using namespace std; #define MAX 1000 class Stack { int top; public: int a[MAX]; Stack() { top = -1; } bool push(int x); int pop(); int peek(); bool isEmpty(); }; bool Stack::push(int x) { if (top >= (MAX - 1)) { cout << \"Stack Overflow\\n\"; return false; } else { a[++top] = x; cout << x << \" pushed into stack\\n\"; return true; } } int Stack::pop() { if (top < 0) { cout << \"Stack Underflow\\n\"; return 0; } else { int x = a[top--]; return x; } } int Stack::peek() { if (top < 0) { cout << \"Stack is Empty\\n\"; return 0; } else { int x = a[top]; return x; } } bool Stack::isEmpty() { return (top < 0); } int main() { class Stack s; s.push(10); s.push(20); s.push(30); cout << s.pop() << \" popped from stack\\n\"; cout << \"Top element is \" << s.peek() << endl; return 0; }"));

        questions.add(new Question("Write a program to implement a queue using arrays", "#include<iostream> using namespace std; #define MAX 1000 class Queue { int front, rear; public: int a[MAX]; Queue() { front = -1; rear = -1; } bool enqueue(int x); int dequeue(); int peek(); bool isEmpty(); }; bool Queue::enqueue(int x) { if (rear >= MAX - 1) { cout << \"Queue Overflow\\n\"; return false; } else { a[++rear] = x; cout << x << \" enqueued into queue\\n\"; return true; } } int Queue::dequeue() { if (front == rear) { cout << \"Queue is Empty\\n\"; return 0; } else { int x = a[++front]; return x; } } int Queue::peek() { if (front == rear) { cout << \"Queue is Empty\\n\"; return 0; } else { int x = a[front + 1]; return x; } } bool Queue::isEmpty() { return (front == rear); } int main() { class Queue q; q.enqueue(10); q.enqueue(20); q.enqueue(30); cout << q.dequeue() << \" dequeued from queue\\n\"; cout << \"Front element is \" << q.peek() << endl; return 0; }"));

        questions.add(new Question("Write a program to implement a priority queue using heaps", "#include<iostream> #include<vector> #include<queue> using namespace std; int main() { priority_queue<int> pq; pq.push(10); pq.push(30); pq.push(20); cout << \"Priority Queue: \"; while (!pq.empty()) { cout << pq.top() << \" \"; pq.pop(); } return 0; }"));

        questions.add(new Question("Write a program to implement depth-first search (DFS) on a maze represented as a matrix", "#include<iostream> #include<vector> using namespace std; bool isSafe(vector<vector<int>>& maze, int x, int y) { int N = maze.size(); if (x >= 0 && x < N && y >= 0 && y < N && maze[x][y] == 1) return true; return false; } bool solveMazeUtil(vector<vector<int>>& maze, int x, int y, vector<vector<int>>& sol) { int N = maze.size(); if (x == N - 1 && y == N - 1) { sol[x][y] = 1; return true; } if (isSafe(maze, x, y)) { sol[x][y] = 1; if (solveMazeUtil(maze, x + 1, y, sol)) return true; if (solveMazeUtil(maze, x, y + 1, sol)) return true; sol[x][y] = 0; return false; } return false; } bool solveMaze(vector<vector<int>>& maze) { int N = maze.size(); vector<vector<int>> sol(N, vector<int>(N, 0)); if (!solveMazeUtil(maze, 0, 0, sol)) { cout << \"Solution doesn't exist\"; return false; } cout << \"Solution Path: \" << endl; for (int i = 0; i < N; ++i) { for (int j = 0; j < N; ++j) cout << \" \" << sol[i][j]; cout << endl; } return true; } int main() { vector<vector<int>> maze = { {1, 0, 0, 0}, {1, 1, 0, 1}, {0, 1, 0, 0}, {1, 1, 1, 1} }; solveMaze(maze); return 0; }"));

        questions.add(new Question("Write a program to find the longest common subsequence (LCS) of two strings", "#include<iostream> #include<vector> using namespace std; int max(int a, int b) { return (a > b) ? a : b; } int lcs(string X, string Y) { int m = X.length(); int n = Y.length(); vector<vector<int>> L(m + 1, vector<int>(n + 1)); for (int i = 0; i <= m; ++i) { for (int j = 0; j <= n; ++j) { if (i == 0 || j == 0) L[i][j] = 0; else if (X[i - 1] == Y[j - 1]) L[i][j] = L[i - 1][j - 1] + 1; else L[i][j] = max(L[i - 1][j], L[i][j - 1]); } } return L[m][n]; } int main() { string X = \"AGGTAB\"; string Y = \"GXTXAYB\"; cout << \"Length of Longest Common Subsequence: \" << lcs(X, Y); return 0; }"));

        questions.add(new Question("Write a program to implement Dijkstra's algorithm for shortest path in a graph", "#include<iostream> #include<vector> #include<queue> #include<climits> using namespace std; #define V 9 int minDistance(int dist[], bool sptSet[]) { int min = INT_MAX, min_index; for (int v = 0; v < V; ++v) if (sptSet[v] == false && dist[v] <= min) min = dist[v], min_index = v; return min_index; } void printSolution(int dist[], int n) { cout << \"Vertex \\t Distance from Source\\n\"; for (int i = 0; i < V; ++i) cout << i << \" \\t\\t \" << dist[i] << endl; } void dijkstra(int graph[V][V], int src) { int dist[V]; bool sptSet[V]; for (int i = 0; i < V; ++i) dist[i] = INT_MAX, sptSet[i] = false; dist[src] = 0; for (int count = 0; count < V - 1; ++count) { int u = minDistance(dist, sptSet); sptSet[u] = true; for (int v = 0; v < V; ++v) if (!sptSet[v] && graph[u][v] && dist[u] != INT_MAX && dist[u] + graph[u][v] < dist[v]) dist[v] = dist[u] + graph[u][v]; } printSolution(dist, V); } int main() { int graph[V][V] = {{0, 4, 0, 0, 0, 0, 0, 8, 0}, {4, 0, 8, 0, 0, 0, 0, 11, 0}, {0, 8, 0, 7, 0, 4, 0, 0, 2}, {0, 0, 7, 0, 9, 14, 0, 0, 0}, {0, 0, 0, 9, 0, 10, 0, 0, 0}, {0, 0, 4, 14, 10, 0, 2, 0, 0}, {0, 0, 0, 0, 0, 2, 0, 1, 6}, {8, 11, 0, 0, 0, 0, 1, 0, 7}, {0, 0, 2, 0, 0, 0, 6, 7, 0}}; dijkstra(graph, 0); return 0; }"));

        questions.add(new Question("Write a program to implement the Knapsack problem using dynamic programming", "#include<iostream> using namespace std; int max(int a, int b) { return (a > b) ? a : b; } int knapSack(int W, int wt[], int val[], int n) { if (n == 0 || W == 0) return 0; if (wt[n - 1] > W) return knapSack(W, wt, val, n - 1); else return max( val[n - 1] + knapSack(W - wt[n - 1], wt, val, n - 1), knapSack(W, wt, val, n - 1) ); } int main() { int val[] = { 60, 100, 120 }; int wt[] = { 10, 20, 30 }; int W = 50; int n = sizeof(val) / sizeof(val[0]); cout << \"Maximum value in Knapsack: \" << knapSack(W, wt, val, n); return 0; }"));

        questions.add(new Question("Write a program to implement the longest increasing subsequence (LIS) problem using dynamic programming", "#include<iostream> using namespace std; int lis(int arr[], int n) { int *lis, i, j, max = 0; lis = new int[n]; for (i = 0; i < n; i++) lis[i] = 1; for (i = 1; i < n; i++) for (j = 0; j < i; j++) if (arr[i] > arr[j] && lis[i] < lis[j] + 1) lis[i] = lis[j] + 1; for (i = 0; i < n; i++) if (max < lis[i]) max = lis[i]; return max; } int main() { int arr[] = { 10, 22, 9, 33, 21, 50, 41, 60 }; int n = sizeof(arr) / sizeof(arr[0]); cout << \"Length of Longest Increasing Subsequence: \" << lis(arr, n); return 0; }"));

        questions.add(new Question("Write a program to implement Floyd Warshall algorithm for all-pairs shortest path problem", "#include<iostream> #include<vector> using namespace std; #define INF 99999 void printSolution(vector<vector<int>>& dist, int V) { cout << \"The shortest distance between every pair of vertices:\\n\"; for (int i = 0; i < V; i++) { for (int j = 0; j < V; j++) { if (dist[i][j] == INF) cout << \"INF\\t\"; else cout << dist[i][j] << \"\\t\"; } cout << endl; } } void floydWarshall(vector<vector<int>>& graph, int V) { vector<vector<int>> dist = graph; for (int k = 0; k < V; k++) for (int i = 0; i < V; i++) for (int j = 0; j < V; j++) if (dist[i][k] != INF && dist[k][j] != INF && dist[i][k] + dist[k][j] < dist[i][j]) dist[i][j] = dist[i][k] + dist[k][j]; printSolution(dist, V); } int main() { vector<vector<int>>> graph = { {0, 5, INF, 10}, {INF, 0, 3, INF}, {INF, INF, 0, 1}, {INF, INF, INF, 0} }; int V = 4; floydWarshall(graph, V); return 0; }"));

        questions.add(new Question("Write a program to find the number of ways to reach the n-th stair by taking steps of size 1, 2, or 3 using dynamic programming", "#include<iostream> using namespace std; int countWays(int n) { int *ways = new int[n + 1]; ways[0] = 1; ways[1] = 1; ways[2] = 2; for (int i = 3; i <= n; i++) ways[i] = ways[i - 1] + ways[i - 2] + ways[i - 3]; return ways[n]; } int main() { int n = 4; cout << \"Number of ways to reach the n-th stair: \" << countWays(n); return 0; }"));

        questions.add(new Question("Write a program to find the edit distance between two strings using dynamic programming", "#include<iostream> using namespace std; int min(int x, int y, int z) { return min(min(x, y), z); } int editDistance(string str1, string str2, int m, int n) { int dp[m + 1][n + 1]; for (int i = 0; i <= m; ++i) { for (int j = 0; j <= n; ++j) { if (i == 0) dp[i][j] = j; else if (j == 0) dp[i][j] = i; else if (str1[i - 1] == str2[j - 1]) dp[i][j] = dp[i - 1][j - 1]; else dp[i][j] = 1 + min(dp[i][j - 1], dp[i - 1][j], dp[i - 1][j - 1]); } } return dp[m][n]; } int main() { string str1 = \"sunday\"; string str2 = \"saturday\"; cout << \"Edit Distance: \" << editDistance(str1, str2, str1.length(), str2.length()); return 0; }"));

        questions.add(new Question("Write a program to implement topological sorting in a directed graph", "#include<iostream> #include <list> #include <stack> using namespace std; class Graph { int V; list<int> *adj; void topologicalSortUtil(int v, bool visited[], stack<int> &Stack); public: Graph(int V); void addEdge(int v, int w); void topologicalSort(); }; Graph::Graph(int V) { this->V = V; adj = new list<int>[V]; } void Graph::addEdge(int v, int w) { adj[v].push_back(w); } void Graph::topologicalSortUtil(int v, bool visited[], stack<int> &Stack) { visited[v] = true; list<int>::iterator i; for (i = adj[v].begin(); i != adj[v].end(); ++i) if (!visited[*i]) topologicalSortUtil(*i, visited, Stack); Stack.push(v); } void Graph::topologicalSort() { stack<int> Stack; bool *visited = new bool[V]; for (int i = 0; i < V; i++) visited[i] = false; for (int i = 0; i < V; i++) if (visited[i] == false) topologicalSortUtil(i, visited, Stack); while (Stack.empty() == false) { cout << Stack.top() << \" \"; Stack.pop(); } } int main() { Graph g(6); g.addEdge(5, 2); g.addEdge(5, 0); g.addEdge(4, 0); g.addEdge(4, 1); g.addEdge(2, 3); g.addEdge(3, 1); cout << \"Topological Sort of the given graph:\\n\"; g.topologicalSort(); return 0; }"));

        questions.add(new Question("Write a program to implement the Josephus problem using recursion", "#include<iostream> using namespace std; int josephus(int n, int k) { if (n == 1) return 0; else return (josephus(n - 1, k) + k) % n; } int main() { int n = 7, k = 3; cout << \"The chosen place is \" << josephus(n, k); return 0; }"));

        questions.add(new Question("Write a program to implement the Josephus problem using iterative approach", "#include<iostream> using namespace std; int josephus(int n, int k) { int res = 0; for (int i = 1; i <= n; ++i) res = (res + k) % i; return res; } int main() { int n = 7, k = 3; cout << \"The chosen place is \" << josephus(n, k); return 0; }"));

        questions.add(new Question("Write a program to generate permutations of a string using backtracking", "#include<iostream> using namespace std; void permute(string str, int l, int r) { if (l == r) cout << str << endl; else { for (int i = l; i <= r; ++i) { swap(str[l], str[i]); permute(str, l + 1, r); swap(str[l], str[i]); } } } int main() { string str = \"ABC\"; int n = str.size(); permute(str, 0, n - 1); return 0; }"));

        questions.add(new Question("Write a program to implement heap sort algorithm", "#include<iostream> using namespace std; void heapify(int arr[], int n, int i) { int largest = i; int l = 2 * i + 1; int r = 2 * i + 2; if (l < n && arr[l] > arr[largest]) largest = l; if (r < n && arr[r] > arr[largest]) largest = r; if (largest != i) { swap(arr[i], arr[largest]); heapify(arr, n, largest); } } void heapSort(int arr[], int n) { for (int i = n / 2 - 1; i >= 0; i--) heapify(arr, n, i); for (int i = n - 1; i > 0; i--) { swap(arr[0], arr[i]); heapify(arr, i, 0); } } void printArray(int arr[], int n) { for (int i = 0; i < n; ++i) cout << arr[i] << \" \"; cout << \"\\n\"; } int main() { int arr[] = { 12, 11, 13, 5, 6, 7 }; int n = sizeof(arr) / sizeof(arr[0]); heapSort(arr, n); cout << \"Sorted array is \\n\"; printArray(arr, n); return 0; }"));

        questions.add(new Question("Write a program to implement bubble sort algorithm", "#include<iostream> using namespace std; void bubbleSort(int arr[], int n) { for (int i = 0; i < n - 1; i++) for (int j = 0; j < n - i - 1; j++) if (arr[j] > arr[j + 1]) swap(arr[j], arr[j + 1]); } void printArray(int arr[], int size) { for (int i = 0; i < size; i++) cout << arr[i] << \" \"; cout << endl; } int main() { int arr[] = { 64, 34, 25, 12, 22, 11, 90 }; int n = sizeof(arr) / sizeof(arr[0]); bubbleSort(arr, n); cout << \"Sorted array: \\n\"; printArray(arr, n); return 0; }"));

        questions.add(new Question("Write a program to implement quick sort algorithm", "#include<iostream> using namespace std; void swap(int* a, int* b) { int t = *a; *a = *b; *b = t; } int partition(int arr[], int low, int high) { int pivot = arr[high]; int i = (low - 1); for (int j = low; j <= high - 1; j++) { if (arr[j] <= pivot) { i++; swap(&arr[i], &arr[j]); } } swap(&arr[i + 1], &arr[high]); return (i + 1); } void quickSort(int arr[], int low, int high) { if (low < high) { int pi = partition(arr, low, high); quickSort(arr, low, pi - 1); quickSort(arr, pi + 1, high); } } void printArray(int arr[], int size) { for (int i = 0; i < size; i++) cout << arr[i] << \" \"; cout << endl; } int main() { int arr[] = { 10, 7, 8, 9, 1, 5 }; int n = sizeof(arr) / sizeof(arr[0]); quickSort(arr, 0, n - 1); cout << \"Sorted array: \\n\"; printArray(arr, n); return 0; }"));

        questions.add(new Question("Write a program to implement insertion sort algorithm", "#include<iostream> using namespace std; void insertionSort(int arr[], int n) { int i, key, j; for (i = 1; i < n; i++) { key = arr[i]; j = i - 1; while (j >= 0 && arr[j] > key) { arr[j + 1] = arr[j]; j = j - 1; } arr[j + 1] = key; } } void printArray(int arr[], int n) { int i; for (i = 0; i < n; i++) cout << arr[i] << \" \"; cout << endl; } int main() { int arr[] = { 12, 11, 13, 5, 6 }; int n = sizeof(arr) / sizeof(arr[0]); insertionSort(arr, n); cout << \"Sorted array: \\n\"; printArray(arr, n); return 0; }"));

        questions.add(new Question("Write a program to implement selection sort algorithm", "#include<iostream> using namespace std; void swap(int *xp, int *yp) { int temp = *xp; *xp = *yp; *yp = temp; } void selectionSort(int arr[], int n) { int i, j, min_idx; for (i = 0; i < n - 1; i++) { min_idx = i; for (j = i + 1; j < n; j++) if (arr[j] < arr[min_idx]) min_idx = j; swap(&arr[min_idx], &arr[i]); } } void printArray(int arr[], int size) { int i; for (i = 0; i < size; i++) cout << arr[i] << \" \"; cout << endl; } int main() { int arr[] = { 64, 25, 12, 22, 11 }; int n = sizeof(arr) / sizeof(arr[0]); selectionSort(arr, n); cout << \"Sorted array: \\n\"; printArray(arr, n); return 0; }"));

        questions.add(new Question("Write a program to reverse a singly linked list", "#include<iostream> using namespace std; class Node { public: int data; Node* next; }; Node* reverse(Node* head) { Node* prev = NULL; Node* current = head; Node* next = NULL; while (current != NULL) { next = current->next; current->next = prev; prev = current; current = next; } head = prev; return head; } void printList(Node* head) { while (head != NULL) { cout << head->data << \" \"; head = head->next; } } void push(Node** head_ref, int new_data) { Node* new_node = new Node(); new_node->data = new_data; new_node->next = (*head_ref); (*head_ref) = new_node; } int main() { Node* head = NULL; push(&head, 20); push(&head, 4); push(&head, 15); push(&head, 85); cout << \"Given linked list\\n\"; printList(head); head = reverse(head); cout << \"\\nReversed Linked list \\n\"; printList(head); return 0; }"));

        questions.add(new Question("Write a program to check whether a singly linked list is a palindrome", "#include<iostream> #include <stack> using namespace std; class Node { public: int data; Node* next; }; bool isPalindrome(Node* head) { Node* slow_ptr = head; stack<int> s; while (slow_ptr != NULL) { s.push(slow_ptr->data); slow_ptr = slow_ptr->next; } while (head != NULL) { int i = s.top(); s.pop(); if (head->data != i) return false; head = head->next; } return true; } void push(Node** head_ref, int new_data) { Node* new_node = new Node(); new_node->data = new_data; new_node->next = (*head_ref); (*head_ref) = new_node; } void printList(Node* ptr) { while (ptr != NULL) { cout << ptr->data << \" \"; ptr = ptr->next; } cout << \"\\n\"; } int main() { Node* head = NULL; int str[] = { 1, 2, 3, 3, 2, 1 }; int i; for (i = 0; i < 6; i++) { push(&head, str[i]); printList(head); isPalindrome(head) ? cout << \"Palindrome\\n\\n\" : cout << \"Not Palindrome\\n\\n\"; } return 0; }"));

        questions.add(new Question("Write a program to delete a node in a singly linked list", "#include<iostream> using namespace std; class Node { public: int data; Node* next; }; void deleteNode(Node** head_ref, int key) { Node* temp = *head_ref; Node* prev = NULL; if (temp != NULL && temp->data == key) { *head_ref = temp->next; delete temp; return; } else { while (temp != NULL && temp->data != key) { prev = temp; temp = temp->next; } if (temp == NULL) return; prev->next = temp->next; delete temp; } } void push(Node** head_ref, int new_data) { Node* new_node = new Node(); new_node->data = new_data; new_node->next = (*head_ref); (*head_ref) = new_node; } void printList(Node* node) { while (node != NULL) { cout << node->data << \" \"; node = node->next; } } int main() { Node* head = NULL; push(&head, 7); push(&head, 1); push(&head, 3); push(&head, 2); push(&head, 8); cout << \"Created Linked List: \"; printList(head); deleteNode(&head, 1); cout << \"\\nLinked List after Deletion of 1: \"; printList(head); return 0; }"));

        questions.add(new Question("Write a program to implement binary search in an array", "#include<iostream> using namespace std; int binarySearch(int arr[], int l, int r, int x) { if (r >= l) { int mid = l + (r - l) / 2; if (arr[mid] == x) return mid; if (arr[mid] > x) return binarySearch(arr, l, mid - 1, x); return binarySearch(arr, mid + 1, r, x); } return -1; } int main() { int arr[] = { 2, 3, 4, 10, 40 }; int n = sizeof(arr) / sizeof(arr[0]); int x = 10; int result = binarySearch(arr, 0, n - 1, x); (result == -1) ? cout << \"Element is not present in array\" : cout << \"Element is present at index \" << result; return 0; }"));

        questions.add(new Question("Write a program to find the factorial of a number using recursion", "#include<iostream> using namespace std; int factorial(int n) { if (n == 1) return 1; else return n * factorial(n - 1); } int main() { int num = 5; cout << \"Factorial of \" << num << \" is \" << factorial(num); return 0; }"));

        questions.add(new Question("Write a program to calculate Fibonacci series up to n using recursion", "#include<iostream> using namespace std; int fibonacci(int n) { if (n <= 1) return n; return fibonacci(n - 1) + fibonacci(n - 2); } int main() { int n = 10; cout << \"Fibonacci Series up to \" << n << \": \\n\"; for (int i = 0; i < n; i++) cout << fibonacci(i) << \" \"; return 0; }"));

        questions.add(new Question("Write a program to find the GCD of two numbers using recursion", "#include<iostream> using namespace std; int gcd(int a, int b) { if (b == 0) return a; return gcd(b, a % b); } int main() { int a = 25, b = 10; cout << \"GCD of \" << a << \" and \" << b << \" is \" << gcd(a, b); return 0; }"));

        questions.add(new Question("Write a program to print the Pascal's triangle", "#include<iostream> using namespace std; void printPascal(int n) { for (int line = 1; line <= n; line++) { int C = 1; for (int i = 1; i <= line; i++) { cout << C << \" \"; C = C * (line - i) / i; } cout << \"\\n\"; } } int main() { int n = 5; printPascal(n); return 0; }"));

        questions.add(new Question("Write a program to find the sum of natural numbers using recursion", "#include<iostream> using namespace std; int sum(int n) { if (n != 0) return n + sum(n - 1); else return n; } int main() { int n = 5; cout << \"Sum of natural numbers from 1 to \" << n << \" is \" << sum(n); return 0; }"));

        questions.add(new Question("Write a program to find the roots of a quadratic equation", "#include<iostream> #include<cmath> using namespace std; void findRoots(int a, int b, int c) { int D = b * b - 4 * a * c; float sqrt_val = sqrt(abs(D)); if (D > 0) { cout << \"Roots are real and different \\n\"; cout << (float)(-b + sqrt_val) / (2 * a) << \" \\n\"; cout << (float)(-b - sqrt_val) / (2 * a) << \" \\n\"; } else if (D == 0) { cout << \"Roots are real and same \\n\"; cout << (float)-b / (2 * a) << \" \\n\"; } else { cout << \"Roots are complex \\n\"; cout << (float)-b / (2 * a) << \" + i\" << sqrt_val << \" \\n\"; cout << (float)-b / (2 * a) << \" - i\" << sqrt_val << \" \\n\"; } } int main() { int a = 1, b = -7, c = 12; cout << \"The quadratic equation is: \" << a << \"x^2 + \" << b << \"x + \" << c << \" = 0 \\n\"; findRoots(a, b, c); return 0; }"));

        questions.add(new Question("Write a program to check if a number is prime or not", "#include<iostream> using namespace std; bool isPrime(int n) { if (n <= 1) return false; for (int i = 2; i * i <= n; i++) if (n % i == 0) return false; return true; } int main() { int n = 23; isPrime(n) ? cout << \"Prime\" : cout << \"Not Prime\"; return 0; }"));

        questions.add(new Question("Write a program to find the sum of digits of a number using recursion", "#include<iostream> using namespace std; int sumOfDigits(int n) { if (n == 0) return 0; return (n % 10 + sumOfDigits(n / 10)); } int main() { int num = 12345; cout << \"Sum of digits of \" << num << \" is \" << sumOfDigits(num); return 0; }"));

        questions.add(new Question("Write a program to find the sum of an array of integers", "#include<iostream> using namespace std; int sumArray(int arr[], int n) { int sum = 0; for (int i = 0; i < n; i++) sum += arr[i]; return sum; } int main() { int arr[] = { 1, 2, 3, 4, 5 }; int n = sizeof(arr) / sizeof(arr[0]); cout << \"Sum of elements: \" << sumArray(arr, n); return 0; }"));

        questions.add(new Question("Write a program to find the maximum element in an array of integers", "#include<iostream> using namespace std; int maxArray(int arr[], int n) { int max = arr[0]; for (int i = 1; i < n; i++) if (arr[i] > max) max = arr[i]; return max; } int main() { int arr[] = { 5, 9, 10, 4, 3, 1 }; int n = sizeof(arr) / sizeof(arr[0]); cout << \"Maximum element: \" << maxArray(arr, n); return 0; }"));

        questions.add(new Question("Write a program to find the minimum element in an array of integers", "#include<iostream> using namespace std; int minArray(int arr[], int n) { int min = arr[0]; for (int i = 1; i < n; i++) if (arr[i] < min) min = arr[i]; return min; } int main() { int arr[] = { 5, 9, 10, 4, 3, 1 }; int n = sizeof(arr) / sizeof(arr[0]); cout << \"Minimum element: \" << minArray(arr, n); return 0; }"));

        questions.add(new Question("Write a program to search for an element in a sorted and rotated array", "#include<iostream> using namespace std; int search(int arr[], int l, int h, int key) { if (l > h) return -1; int mid = (l + h) / 2; if (arr[mid] == key) return mid; if (arr[l] <= arr[mid]) { if (key >= arr[l] && key <= arr[mid]) return search(arr, l, mid - 1, key); return search(arr, mid + 1, h, key); } if (key >= arr[mid] && key <= arr[h]) return search(arr, mid + 1, h, key); return search(arr, l, mid - 1, key); } int main() { int arr[] = { 4, 5, 6, 7, 8, 9, 1, 2, 3 }; int n = sizeof(arr) / sizeof(arr[0]); int key = 6; int i = search(arr, 0, n - 1, key); if (i != -1) cout << \"Index: \" << i << endl; else cout << \"Key not found\"; return 0; }"));

        questions.add(new Question("Write a program to find the square root of a number using binary search", "#include<iostream> using namespace std; float squareRoot(int n, int p) { int start = 0, end = n; float ans; while (start <= end) { int mid = (start + end) / 2; if (mid * mid == n) return mid; if (mid * mid < n) { start = mid + 1; ans = mid; } else end = mid - 1; } float increment = 0.1; for (int i = 0; i < p; i++) { while (ans * ans <= n) ans += increment; ans -= increment; increment /= 10; } return ans; } int main() { int n = 50, p = 3; cout << \"Square root of \" << n << \" to precision \" << p << \" is \" << squareRoot(n, p); return 0; }"));

        questions.add(new Question("Write a program to merge two sorted arrays into a single sorted array", "#include<iostream> using namespace std; void mergeArrays(int arr1[], int arr2[], int n1, int n2, int arr3[]) { int i = 0, j = 0, k = 0; while (i < n1 && j < n2) { if (arr1[i] < arr2[j]) arr3[k++] = arr1[i++]; else arr3[k++] = arr2[j++]; } while (i < n1) arr3[k++] = arr1[i++]; while (j < n2) arr3[k++] = arr2[j++]; } void printArray(int arr[], int size) { for (int i = 0; i < size; i++) cout << arr[i] << \" \"; } int main() { int arr1[] = { 1, 3, 5, 7 }; int arr2[] = { 2, 4, 6, 8 }; int n1 = sizeof(arr1) / sizeof(arr1[0]); int n2 = sizeof(arr2) / sizeof(arr2[0]); int arr3[n1 + n2]; mergeArrays(arr1, arr2, n1, n2, arr3); cout << \"Merged array is: \"; printArray(arr3, n1 + n2); return 0; }"));

        questions.add(new Question("Write a program to implement breadth-first search (BFS) algorithm for a graph", "#include<iostream> #include <list> #include <queue> using namespace std; class Graph { int V; list<int> *adj; public: Graph(int V); void addEdge(int v, int w); void BFS(int s); }; Graph::Graph(int V) { this->V = V; adj = new list<int>[V]; } void Graph::addEdge(int v, int w) { adj[v].push_back(w); } void Graph::BFS(int s) { bool *visited = new bool[V]; for(int i = 0; i < V; i++) visited[i] = false; queue<int> q; visited[s] = true; q.push(s); while(!q.empty()) { s = q.front(); cout << s << \" \"; q.pop(); for(list<int>::iterator i = adj[s].begin(); i != adj[s].end(); ++i) { if(!visited[*i]) { visited[*i] = true; q.push(*i); } } } } int main() { Graph g(4); g.addEdge(0, 1); g.addEdge(0, 2); g.addEdge(1, 2); g.addEdge(2, 0); g.addEdge(2, 3); g.addEdge(3, 3); cout << \"Following is Breadth First Traversal (starting from vertex 2) \\n\"; g.BFS(2); return 0; }"));

        questions.add(new Question("Write a program to implement depth-first search (DFS) algorithm for a graph", "#include<iostream> #include <list> using namespace std; class Graph { int V; list<int> *adj; void DFSUtil(int v, bool visited[]); public: Graph(int V); void addEdge(int v, int w); void DFS(int v); }; Graph::Graph(int V) { this->V = V; adj = new list<int>[V]; } void Graph::addEdge(int v, int w) { adj[v].push_back(w); } void Graph::DFSUtil(int v, bool visited[]) { visited[v] = true; cout << v << \" \"; list<int>::iterator i; for (i = adj[v].begin(); i != adj[v].end(); ++i) if (!visited[*i]) DFSUtil(*i, visited); } void Graph::DFS(int v) { bool *visited = new bool[V]; for (int i = 0; i < V; i++) visited[i] = false; DFSUtil(v, visited); } int main() { Graph g(4); g.addEdge(0, 1); g.addEdge(0, 2); g.addEdge(1, 2); g.addEdge(2, 0); g.addEdge(2, 3); g.addEdge(3, 3); cout << \"Following is Depth First Traversal (starting from vertex 2) \\n\"; g.DFS(2); return 0; }"));

        questions.add(new Question("Write a program to implement the Kruskal's algorithm for finding the Minimum Spanning Tree (MST)", "#include<iostream> #include <vector> #include <algorithm> using namespace std; class Edge { public: int src, dest, weight; }; class Graph { public: vector<Edge> edge; int V; Graph(int V) { this->V = V; } void addEdge(int src, int dest, int weight) { Edge temp; temp.src = src; temp.dest = dest; temp.weight = weight; edge.push_back(temp); } void KruskalMST(); }; class subset { public: int parent, rank; }; int find(subset subsets[], int i) { if (subsets[i].parent != i) subsets[i].parent = find(subsets, subsets[i].parent); return subsets[i].parent; } void Union(subset subsets[], int x, int y) { int xroot = find(subsets, x); int yroot = find(subsets, y); if (subsets[xroot].rank < subsets[yroot].rank) subsets[xroot].parent = yroot; else if (subsets[xroot].rank > subsets[yroot].rank) subsets[yroot].parent = xroot; else { subsets[yroot].parent = xroot; subsets[xroot].rank++; } } void Graph::KruskalMST() { vector<Edge> result; int e = 0; int i = 0; sort(edge.begin(), edge.end(), [](Edge a, Edge b) { return a.weight < b.weight; }); subset *subsets = new subset[( V * sizeof(subset) )]; for (int v = 0; v < V; ++v) { subsets[v].parent = v; subsets[v].rank = 0; } while (e < V - 1 && i < edge.size()) { Edge next_edge = edge[i++]; int x = find(subsets, next_edge.src); int y = find(subsets, next_edge.dest); if (x != y) { result.push_back(next_edge); Union(subsets, x, y); ++e; } } cout << \"Following are the edges in the constructed MST\\n\"; int minimumCost = 0; for (i = 0; i < result.size(); ++i) { cout << result[i].src << \" -- \" << result[i].dest << \" == \" << result[i].weight << \"\\n\"; minimumCost += result[i].weight; } cout << \"Minimum Cost Spanning Tree: \" << minimumCost << \"\\n\"; } int main() { int V = 4; Graph g(V); g.addEdge(0, 1, 10); g.addEdge(0, 2, 6); g.addEdge(0, 3, 5); g.addEdge(1, 3, 15); g.addEdge(2, 3, 4); g.KruskalMST(); return 0; }"));

        questions.add(new Question("Write a program to implement the Dijkstra's algorithm for finding the shortest path in a graph", "#include<iostream> #include <limits.h> using namespace std; #define V 9 int minDistance(int dist[], bool sptSet[]) { int min = INT_MAX, min_index; for (int v = 0; v < V; v++) if (sptSet[v] == false && dist[v] <= min) min = dist[v], min_index = v; return min_index; } void printSolution(int dist[], int n) { cout << \"Vertex \\t\\t Distance from Source\\n\"; for (int i = 0; i < V; i++) cout << i << \" \\t\\t \" << dist[i] << endl; } void dijkstra(int graph[V][V], int src) { int dist[V]; bool sptSet[V]; for (int i = 0; i < V; i++) dist[i] = INT_MAX, sptSet[i] = false; dist[src] = 0; for (int count = 0; count < V - 1; count++) { int u = minDistance(dist, sptSet); sptSet[u] = true; for (int v = 0; v < V; v++) if (!sptSet[v] && graph[u][v] && dist[u] != INT_MAX && dist[u] + graph[u][v] < dist[v]) dist[v] = dist[u] + graph[u][v]; } printSolution(dist, V); } int main() { int graph[V][V] = { { 0, 4, 0, 0, 0, 0, 0, 8, 0 }, { 4, 0, 8, 0, 0, 0, 0, 11, 0 }, { 0, 8, 0, 7, 0, 4, 0, 0, 2 }, { 0, 0, 7, 0, 9, 14, 0, 0, 0 }, { 0, 0, 0, 9, 0, 10, 0, 0, 0 }, { 0, 0, 4, 14, 10, 0, 2, 0, 0 }, { 0, 0, 0, 0, 0, 2, 0, 1, 6 }, { 8, 11, 0, 0, 0, 0, 1, 0, 7 }, { 0, 0, 2, 0, 0, 0, 6, 7, 0 } }; dijkstra(graph, 0); return 0; }"));

        questions.add(new Question("Write a program to find the longest common subsequence of two sequences", "#include<iostream> #include<cstring> using namespace std; int max(int a, int b) { return (a > b) ? a : b; } int lcs(char* X, char* Y, int m, int n) { int L[m + 1][n + 1]; for (int i = 0; i <= m; i++) { for (int j = 0; j <= n; j++) { if (i == 0 || j == 0) L[i][j] = 0; else if (X[i - 1] == Y[j - 1]) L[i][j] = L[i - 1][j - 1] + 1; else L[i][j] = max(L[i - 1][j], L[i][j - 1]); } } return L[m][n]; } int main() { char X[] = \"AGGTAB\"; char Y[] = \"GXTXAYB\"; int m = strlen(X); int n = strlen(Y); cout << \"Length of LCS is \" << lcs(X, Y, m, n); return 0; }"));

        questions.add(new Question("Write a program to perform matrix multiplication", "#include<iostream> using namespace std; #define N 4 void multiply(int mat1[][N], int mat2[][N], int res[][N]) { for (int i = 0; i < N; i++) { for (int j = 0; j < N; j++) { res[i][j] = 0; for (int k = 0; k < N; k++) res[i][j] += mat1[i][k] * mat2[k][j]; } } } int main() { int mat1[N][N] = { { 1, 1, 1, 1 }, { 2, 2, 2, 2 }, { 3, 3, 3, 3 }, { 4, 4, 4, 4 } }; int mat2[N][N] = { { 1, 1, 1, 1 }, { 2, 2, 2, 2 }, { 3, 3, 3, 3 }, { 4, 4, 4, 4 } }; int res[N][N]; multiply(mat1, mat2, res); cout << \"Result matrix is \\n\"; for (int i = 0; i < N; i++) { for (int j = 0; j < N; j++) cout << res[i][j] << \" \"; cout << \"\\n\"; } return 0; }"));

        questions.add(new Question("Write a program to implement the 0/1 Knapsack problem", "#include<iostream> using namespace std; int max(int a, int b) { return (a > b) ? a : b; } int knapSack(int W, int wt[], int val[], int n) { int i, w; int K[n + 1][W + 1]; for (i = 0; i <= n; i++) { for (w = 0; w <= W; w++) { if (i == 0 || w == 0) K[i][w] = 0; else if (wt[i - 1] <= w) K[i][w] = max(val[i - 1] + K[i - 1][w - wt[i - 1]], K[i - 1][w]); else K[i][w] = K[i - 1][w]; } } return K[n][W]; } int main() { int val[] = { 60, 100, 120 }; int wt[] = { 10, 20, 30 }; int W = 50; int n = sizeof(val) / sizeof(val[0]); cout << \"Maximum value: \" << knapSack(W, wt, val, n); return 0; }"));

        questions.add(new Question("Write a program to perform bubble sort on an array of integers", "#include<iostream> using namespace std; void bubbleSort(int arr[], int n) { int i, j; for (i = 0; i < n - 1; i++) for (j = 0; j < n - i - 1; j++) if (arr[j] > arr[j + 1]) swap(arr[j], arr[j + 1]); } void printArray(int arr[], int size) { int i; for (i = 0; i < size; i++) cout << arr[i] << \" \"; cout << endl; } int main() { int arr[] = { 64, 34, 25, 12, 22, 11, 90 }; int n = sizeof(arr) / sizeof(arr[0]); bubbleSort(arr, n); cout << \"Sorted array: \\n\"; printArray(arr, n); return 0; }"));

        questions.add(new Question("Write a program to perform selection sort on an array of integers", "#include<iostream> using namespace std; void swap(int* xp, int* yp) { int temp = *xp; *xp = *yp; *yp = temp; } void selectionSort(int arr[], int n) { int i, j, min_idx; for (i = 0; i < n - 1; i++) { min_idx = i; for (j = i + 1; j < n; j++) if (arr[j] < arr[min_idx]) min_idx = j; swap(&arr[min_idx], &arr[i]); } } void printArray(int arr[], int size) { int i; for (i = 0; i < size; i++) cout << arr[i] << \" \"; cout << endl; } int main() { int arr[] = { 64, 25, 12, 22, 11 }; int n = sizeof(arr) / sizeof(arr[0]); selectionSort(arr, n); cout << \"Sorted array: \\n\"; printArray(arr, n); return 0; }"));

        questions.add(new Question("Write a program to perform insertion sort on an array of integers", "#include<iostream> using namespace std; void insertionSort(int arr[], int n) { int i, key, j; for (i = 1; i < n; i++) { key = arr[i]; j = i - 1; while (j >= 0 && arr[j] > key) { arr[j + 1] = arr[j]; j = j - 1; } arr[j + 1] = key; } } void printArray(int arr[], int n) { int i; for (i = 0; i < n; i++) cout << arr[i] << \" \"; cout << endl; } int main() { int arr[] = { 12, 11, 13, 5, 6 }; int n = sizeof(arr) / sizeof(arr[0]); insertionSort(arr, n); cout << \"Sorted array: \\n\"; printArray(arr, n); return 0; }"));

        questions.add(new Question("Write a program to perform quick sort on an array of integers", "#include<iostream> using namespace std; void swap(int* a, int* b) { int t = *a; *a = *b; *b = t; } int partition (int arr[], int low, int high) { int pivot = arr[high]; int i = (low - 1); for (int j = low; j <= high - 1; j++) { if (arr[j] < pivot) { i++; swap(&arr[i], &arr[j]); } } swap(&arr[i + 1], &arr[high]); return (i + 1); } void quickSort(int arr[], int low, int high) { if (low < high) { int pi = partition(arr, low, high); quickSort(arr, low, pi - 1); quickSort(arr, pi + 1, high); } } void printArray(int arr[], int size) { int i; for (i = 0; i < size; i++) cout << arr[i] << \" \"; cout << endl; } int main() { int arr[] = { 10, 7, 8, 9, 1, 5 }; int n = sizeof(arr) / sizeof(arr[0]); quickSort(arr, 0, n - 1); cout << \"Sorted array: \\n\"; printArray(arr, n); return 0; }"));

        questions.add(new Question("Write a program to perform merge sort on an array of integers", "#include<iostream> using namespace std; void merge(int arr[], int l, int m, int r) { int i, j, k; int n1 = m - l + 1; int n2 = r - m; int L[n1], R[n2]; for (i = 0; i < n1; i++) L[i] = arr[l + i]; for (j = 0; j < n2; j++) R[j] = arr[m + 1 + j]; i = 0; j = 0; k = l; while (i < n1 && j < n2) { if (L[i] <= R[j]) { arr[k] = L[i]; i++; } else { arr[k] = R[j]; j++; } k++; } while (i < n1) { arr[k] = L[i]; i++; k++; } while (j < n2) { arr[k] = R[j]; j++; k++; } } void mergeSort(int arr[], int l, int r) { if (l >= r) return; int m = l + (r - l) / 2; mergeSort(arr, l, m); mergeSort(arr, m + 1, r); merge(arr, l, m, r); } void printArray(int A[], int size) { int i; for (i = 0; i < size; i++) cout << A[i] << \" \"; cout << endl; } int main() { int arr[] = { 12, 11, 13, 5, 6, 7 }; int arr_size = sizeof(arr) / sizeof(arr[0]); cout << \"Given array is \\n\"; printArray(arr, arr_size); mergeSort(arr, 0, arr_size - 1); cout << \"\\nSorted array is \\n\"; printArray(arr, arr_size); return 0; }"));

        questions.add(new Question("Write a program to check if a given number is a prime number or not", "#include<iostream> using namespace std; bool isPrime(int n) { if (n <= 1) return false; for (int i = 2; i < n; i++) if (n % i == 0) return false; return true; } int main() { int n = 11; if (isPrime(n)) cout << n << \" is a prime number\"; else cout << n << \" is not a prime number\"; return 0; }"));

        questions.add(new Question("Write a program to generate Fibonacci series up to n terms", "#include<iostream> using namespace std; void fibonacci(int n) { int t1 = 0, t2 = 1, nextTerm = 0; cout << \"Fibonacci Series: \"; for (int i = 1; i <= n; ++i) { if(i == 1) { cout << t1 << \", \"; continue; } if(i == 2) { cout << t2 << \", \"; continue; } nextTerm = t1 + t2; t1 = t2; t2 = nextTerm; cout << nextTerm << \", \"; } } int main() { int n = 10; fibonacci(n); return 0; }"));

        questions.add(new Question("Write a program to reverse a string", "#include<iostream> #include<cstring> using namespace std; void reverseStr(string& str) { int n = str.length(); for (int i = 0; i < n / 2; i++) swap(str[i], str[n - i - 1]); } int main() { string str = \"hello\"; reverseStr(str); cout << \"Reversed string is \" << str; return 0; }"));

        questions.add(new Question("Write a program to check if two strings are anagrams", "#include<iostream> #include <algorithm> #include <cstring> using namespace std; bool areAnagram(string str1, string str2) { int n1 = str1.length(); int n2 = str2.length(); if (n1 != n2) return false; sort(str1.begin(), str1.end()); sort(str2.begin(), str2.end()); for (int i = 0; i < n1; i++) if (str1[i] != str2[i]) return false; return true; } int main() { string str1 = \"test\", str2 = \"ttew\"; if (areAnagram(str1, str2)) cout << \"The two strings are anagrams of each other\"; else cout << \"The two strings are not anagrams of each other\"; return 0; }"));

        questions.add(new Question("Write a program to find the factorial of a number", "#include<iostream> using namespace std; int factorial(int n) { if (n == 0) return 1; else return n * factorial(n - 1); } int main() { int num = 5; cout << \"Factorial of \" << num << \" is \" << factorial(num); return 0; }"));

        questions.add(new Question("Write a program to print the Pascal's triangle", "#include<iostream> using namespace std; void printPascalTriangle(int n) { for (int line = 1; line <= n; line++) { int C = 1; for (int i = 1; i <= line; i++) { cout << C << \" \"; C = C * (line - i) / i; } cout << endl; } } int main() { int n = 5; printPascalTriangle(n); return 0; }"));

        questions.add(new Question("Write a program to find the sum of natural numbers up to N", "#include<iostream> using namespace std; int sum(int n) { return n * (n + 1) / 2; } int main() { int n = 5; cout << \"Sum of first \" << n << \" natural numbers is \" << sum(n); return 0; }"));

        questions.add(new Question("Write a program to find the sum of digits of a number", "#include<iostream> using namespace std; int sumOfDigits(int n) { int sum = 0; while (n != 0) { sum += n % 10; n = n / 10; } return sum; } int main() { int num = 123; cout << \"Sum of digits of \" << num << \" is \" << sumOfDigits(num); return 0; }"));

        questions.add(new Question("Write a program to check if a number is an Armstrong number", "#include<iostream> using namespace std; int power(int x, unsigned int y) { if (y == 0) return 1; if (y % 2 == 0) return power(x, y / 2) * power(x, y / 2); return x * power(x, y / 2) * power(x, y / 2); } int order(int x) { int n = 0; while (x) { n++; x = x / 10; } return n; } bool isArmstrong(int x) { int n = order(x); int temp = x, sum = 0; while (temp) { int r = temp % 10; sum += power(r, n); temp = temp / 10; } return (sum == x); } int main() { int x = 153; cout << \"Is \" << x << \" an Armstrong number? \" << (isArmstrong(x) ? \"Yes\" : \"No\"); return 0; }"));

        questions.add(new Question("Write a program to convert an integer to a roman numeral", "#include<iostream> using namespace std; string intToRoman(int num) { string M[] = { \"\", \"M\", \"MM\", \"MMM\" }; string C[] = { \"\", \"C\", \"CC\", \"CCC\", \"CD\", \"D\", \"DC\", \"DCC\", \"DCCC\", \"CM\" }; string X[] = { \"\", \"X\", \"XX\", \"XXX\", \"XL\", \"L\", \"LX\", \"LXX\", \"LXXX\", \"XC\" }; string I[] = { \"\", \"I\", \"II\", \"III\", \"IV\", \"V\", \"VI\", \"VII\", \"VIII\", \"IX\" }; return M[num / 1000] + C[(num % 1000) / 100] + X[(num % 100) / 10] + I[num % 10]; } int main() { int num = 3549; cout << \"Roman numeral is \" << intToRoman(num); return 0; }"));

        questions.add(new Question("Write a program to convert a roman numeral to an integer", "#include<iostream> using namespace std; int romanToInt(string s) { int num = 0; for (int i = 0; i < s.length(); i++) { if (s[i] == 'I' && s[i + 1] == 'V') { num += 4; i++; } else if (s[i] == 'I' && s[i + 1] == 'X') { num += 9; i++; } else if (s[i] == 'X' && s[i + 1] == 'L') { num += 40; i++; } else if (s[i] == 'X' && s[i + 1] == 'C') { num += 90; i++; } else if (s[i] == 'C' && s[i + 1] == 'D') { num += 400; i++; } else if (s[i] == 'C' && s[i + 1] == 'M') { num += 900; i++; } else if (s[i] == 'I') num += 1; else if (s[i] == 'V') num += 5; else if (s[i] == 'X') num += 10; else if (s[i] == 'L') num += 50; else if (s[i] == 'C') num += 100; else if (s[i] == 'D') num += 500; else if (s[i] == 'M') num += 1000; } return num; } int main() { string s = \"MMMCMXLV\"; cout << \"Integer form is \" << romanToInt(s); return 0; }"));

        questions.add(new Question("Write a program to convert a decimal number to binary", "#include<iostream> using namespace std; void decToBinary(int n) { int binaryNum[32]; int i = 0; while (n > 0) { binaryNum[i] = n % 2; n = n / 2; i++; } for (int j = i - 1; j >= 0; j--) cout << binaryNum[j]; } int main() { int n = 17; decToBinary(n); return 0; }"));

        questions.add(new Question("Write a program to convert a binary number to decimal", "#include<iostream> #include <cmath> using namespace std; int binaryToDecimal(long long n) { int decimalNumber = 0, i = 0, remainder; while (n != 0) { remainder = n % 10; n /= 10; decimalNumber += remainder * pow(2, i); ++i; } return decimalNumber; } int main() { long long n = 1011; cout << \"Decimal equivalent: \" << binaryToDecimal(n); return 0; }"));

        questions.add(new Question("Write a program to perform a linear search on an array of integers", "#include<iostream> using namespace std; int linearSearch(int arr[], int n, int x) { for (int i = 0; i < n; i++) if (arr[i] == x) return i; return -1; } int main() { int arr[] = { 2, 3, 4, 10, 40 }; int n = sizeof(arr) / sizeof(arr[0]); int x = 10; int result = linearSearch(arr, n, x); (result == -1) ? cout << \"Element is not present in array\" : cout << \"Element is present at index \" << result; return 0; }"));

        questions.add(new Question("Write a program to perform a binary search on an array of integers", "#include<iostream> using namespace std; int binarySearch(int arr[], int l, int r, int x) { while (l <= r) { int m = l + (r - l) / 2; if (arr[m] == x) return m; if (arr[m] < x) l = m + 1; else r = m - 1; } return -1; } int main() { int arr[] = { 2, 3, 4, 10, 40 }; int n = sizeof(arr) / sizeof(arr[0]); int x = 10; int result = binarySearch(arr, 0, n - 1, x); (result == -1) ? cout << \"Element is not present in array\" : cout << \"Element is present at index \" << result; return 0; }"));

        questions.add(new Question("Write a program to perform a binary search on a string array", "#include<iostream> #include <algorithm> using namespace std; bool binarySearch(string arr[], int l, int r, string x) { while (l <= r) { int m = l + (r - l) / 2; int res = x.compare(arr[m]); if (res == 0) return true; if (res > 0) l = m + 1; else r = m - 1; } return false; } int main() { string arr[] = { \"contribute\", \"geeks\", \"ide\", \"practice\" }; int n = sizeof(arr) / sizeof(arr[0]); sort(arr, arr + n); string x = \"ide\"; bool result = binarySearch(arr, 0, n - 1, x); if (result) cout << \"Element is present in array\"; else cout << \"Element is not present in array\"; return 0; }"));

        questions.add(new Question("Write a program to perform a binary search on a vector of integers", "#include<iostream> #include <algorithm> #include <vector> using namespace std; bool binarySearch(vector<int> vec, int l, int r, int x) { while (l <= r) { int m = l + (r - l) / 2; if (vec[m] == x) return true; if (vec[m] < x) l = m + 1; else r = m - 1; } return false; } int main() { vector<int> vec = { 2, 3, 4, 10, 40 }; sort(vec.begin(), vec.end()); int x = 10; bool result = binarySearch(vec, 0, vec.size() - 1, x); if (result) cout << \"Element is present in vector\"; else cout << \"Element is not present in vector\"; return 0; }"));

        for (Question question : questions) {
            panel.add(question.getPanel());
        }
    }

    public static void main(String[] args) {
        JFrame frame = createFrame();
        frame.add(createUI());
        frame.pack();
        frame.setVisible(true);
    }

    private static JFrame createFrame() {
        JFrame frame = new JFrame("Practice Questions");
        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        frame.setLocationRelativeTo(null);
        frame.setLocationByPlatform(true);
        return frame;
    }

    private static JComponent createUI() {
        JScrollPane scrollPane = new JScrollPane();
        scrollPane.setPreferredSize(new Dimension(900, 600));

        JPanel panel = new JPanel();
        panel.setLayout(new GridLayout(0,1));

        C_Plus_Plus_Coding_Questions_Frame app = new C_Plus_Plus_Coding_Questions_Frame();
        app.loadQuestions(panel);

        scrollPane.setViewportView(panel);
        return scrollPane;
    }
}
